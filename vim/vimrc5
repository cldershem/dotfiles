" vim plug
call plug#begin('~/.vim/autoload')

Plug 'tpope/vim-fugitive'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-vinegar'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdtree-git-plugin'

Plug 'ervandew/supertab'
Plug 'othree/jspc.vim', { 'for': ['javascript', 'javascript.jsx'] }
Plug 'tpope/vim-commentary'
Plug 'groenewege/vim-less'
Plug 'othree/html5.vim'
Plug 'hail2u/vim-css3-syntax'
Plug 'mitsuhiko/vim-jinja'
Plug 'alvan/vim-closetag'
Plug 'honza/vim-snippets'
Plug 'tpope/vim-unimpaired'
Plug 'tweekmonster/braceless.vim'
Plug 'mhinz/vim-signify'
Plug 'edkolev/tmuxline.vim'
Plug 'rust-lang/rust.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'mxw/vim-jsx'
Plug 'posva/vim-vue'
Plug 'mhartington/nvim-typescript', {'do': ':!install.sh \| UpdateRemotePlugins'}
Plug 'leafgarland/typescript-vim'
Plug 'wellle/tmux-complete.vim'
Plug 'Shougo/context_filetype.vim'
Plug 'pest-parser/pest.vim'
Plug 'python/black'
Plug 'numirias/semshi', {'do': ':UpdateRemotePlugins'}
Plug 'justinmk/vim-sneak'
Plug 'dart-lang/dart-vim-plugin'
Plug 'cespare/vim-toml'
Plug 'vim-test/vim-test'
Plug 'tpope/vim-dispatch'
Plug 'reedes/vim-pencil'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'

" YOOOOOOOOOOOOOOOOOOOOOOOOOO! NVIM 5.0_ required
Plug 'nvim-lua/popup.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'neovim/nvim-lspconfig'
Plug 'kabouzeid/nvim-lspinstall'
Plug 'kosayoda/nvim-lightbulb'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'hrsh7th/nvim-compe'
Plug 'nvim-lua/lsp_extensions.nvim'

call plug#end()

" leader
let mapleader=","


" 5.0 things
autocmd CursorHold,CursorHoldI * lua require'nvim-lightbulb'.update_lightbulb()

" Find files using Telescope command-line sugar.
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>
nnoremap <leader>a <cmd>Telescope lsp_code_actions<cr>

set completeopt=menuone,noselect
let g:compe = {}
let g:compe.enabled = v:true
let g:compe.autocomplete = v:true
let g:compe.debug = v:false
let g:compe.min_length = 1
let g:compe.preselect = 'enable'
let g:compe.throttle_time = 80
let g:compe.source_timeout = 200
let g:compe.incomplete_delay = 400
let g:compe.max_abbr_width = 100
let g:compe.max_kind_width = 100
let g:compe.max_menu_width = 100
let g:compe.documentation = v:true

let g:compe.source = {}
let g:compe.source.path = v:true
let g:compe.source.buffer = v:true
let g:compe.source.calc = v:true
let g:compe.source.nvim_lsp = v:true
let g:compe.source.nvim_lua = v:true
let g:compe.source.vsnip = v:true
inoremap <silent><expr> <C-Space> compe#complete()
inoremap <silent><expr> <CR>      compe#confirm('<CR>')
inoremap <silent><expr> <C-e>     compe#close('<C-e>')
inoremap <silent><expr> <C-f>     compe#scroll({ 'delta': +4 })
inoremap <silent><expr> <C-d>     compe#scroll({ 'delta': -4 })

lua << EOF
local nvim_lsp = require('lspconfig')

nvim_lsp.rust_analyzer.setup{ }

local function setup_servers()
  require'lspinstall'.setup()
  local servers = require'lspinstall'.installed_servers()
  for _, server in pairs(servers) do
    require'lspconfig'[server].setup{}
  end
end

setup_servers()

-- Automatically reload after `:LspInstall <server>` so we don't have to restart neovim
require'lspinstall'.post_install_hook = function ()
  setup_servers() -- reload installed servers
  vim.cmd("bufdo e") -- this triggers the FileType autocmd that starts the server
end
EOF

" Python paths
let g:python_host_prog = '/home/cldershem/.virtualenvs/neovim2/bin/python'
let g:python3_host_prog = '/home/cldershem/.virtualenvs/neovim3/bin/python'

" tmux-complete
let g:tmuxcomplete#trigger = ''

" supertab
autocmd FileType javascript let g:SuperTabDefaultCompletionType = "<c-x><c-o>"
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
let g:SuperTabClosePreviewOnPopupClose = 1
let g:SuperTabDefaultCompletionType = "<c-n>"

" supposedly changes stuff based on filetype
filetype on
filetype plugin on

" something for python comments
autocmd FileType python set commentstring=#\ %s
" autocmd FileType htmljinja set commentstring={#\ %s

" fixes colors for dark background
set background=dark

" json tool
:nmap <leader>js :%!python -m json.tool<CR>

" case insensitive search
set ignorecase
set smartcase

" switch between buffers
nnoremap <leader><leader> <c-^

" Syntax highlighting
syntax on

" autoindent
filetype indent on
set autoindent

" line numbers
set relativenumber
set number

" Highlight search
set hlsearch
set incsearch

" Highlight search off
:nmap <leader>q :nohlsearch<CR>

" ctrlp
set runtimepath^=~/.vim/bundle/ctrlp.vim

" nerd tree
:nmap nt :NERDTreeToggle<CR>
let g:NERDTreeWinSize = 30
let g:NERDTreeIgnore = ['\.pyc$']

" closetag
" :au Filetype html,xml,xsl source ~/.vim/scripts/closetag.vim
" :let g:closetag_html_style=1
" :source ~/.vim/bundle/vim-closetag/plugin/closetag.vim

" escape key
:imap jj <Esc>
:imap jk <Esc>

" spaces not tabs
set tabstop=4
set shiftwidth=4
set expandtab

" set tabstops for filetypes
autocmd FileType tex setlocal shiftwidth=2 tabstop=2
autocmd FileType html setlocal shiftwidth=2 tabstop=2
autocmd FileType htmljinja setlocal shiftwidth=2 tabstop=2
autocmd FileType css setlocal shiftwidth=2 tabstop=2
autocmd FileType less setlocal shiftwidth=2 tabstop=2
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2
autocmd FileType ruby setlocal shiftwidth=2 tabstop=2
autocmd FileType eruby setlocal shiftwidth=2 tabstop=2
autocmd FileType yaml setlocal shiftwidth=2 tabstop=2

" no line wrap
set nowrap

" save/restore folding
autocmd BufWinLeave *.* mkview!
autocmd BufWinEnter *.* silent loadview

" folding
:set foldmethod=indent
" nnoremap <Space> za " space toggles fold

" vim-less support
nnoremap ,m :w <BAR> !lessc % > %:t:r.css<CR><space>

" LaTeX rubber macro for compiling with errors
autocmd filetype tex nnoremap <leader>ce :w<CR>:!rubber --pdf --warn all %<CR>

" LaTeX rubber macro for compiling with no errors
autocmd filetype tex nnoremap <leader>cne :w<CR>:!rubber --pdf %<CR><CR>

" LaTeX PDF macro
autocmd filetype tex nnoremap <leader>v :!evince %:r.pdf &<CR><CR>

" spellcheck for LaTeX, txt, markdown
autocmd BufNewFile,BufRead *.tex setlocal spell spelllang=en_us
autocmd BufNewFile,BufRead *.txt setlocal spell spelllang=en_us
autocmd BufNewFile,BufRead *.md setlocal spell spelllang=en_us

" vim-airline
let g:airline_powerline_fonts = 1
let g:airline_theme = 'molokai'

" vim-airline tabs
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#ale#enabled = 1

" Always show statusline
set laststatus=2

" Use 256 colours (Use this setting only if your terminal supports 256 colours)
set t_Co=256

" set splits right and below
set splitright
set splitbelow

" change filetypes
au BufRead,BufNewFile *.md set filetype=markdown
au BufRead,BufNewFile *.jinja set filetype=jinja

" if .vim/after/ftplugin/rst.vim is giving problem
"autocmd FileType rst setlocal shiftwidth=2 tabstop=2

" column markers
au BufRead,BufNewFile *.* let &colorcolumn=88
au BufRead,BufNewFile *.rs let &colorcolumn=120
hi ColorColumn ctermbg=darkgrey

" gundo remap
nnoremap <F5> :GundoToggle<CR>

" highlight current line
" :set cursorline

" persistent undo
set undofile
set undodir=~/.vim/vim-undo

" keeps *.swp out of working dir
set backupdir=~/.vim/vim-tmp
set directory=~/.vim/vim-tmp

" set preview color
:highlight Pmenu ctermbg=darkmagenta
:highlight Pmenu ctermfg=lightgrey
:highlight PmenuSel ctermbg=grey
:highlight PmenuSel ctermfg=darkgrey

" show whitespace
set list
set listchars=tab:▸\ ,trail:▫

" Enable basic mouse behavior such as resizing buffers.
" set mouse=a
" set mouse to work in all but insert mode
set mouse=nvc
if !has('nvim')
    if exists('$TMUX')  " Support resizing in tmux
        set ttymouse=xterm2
    endif
endif

" reload files when changed on disk, i.e. via `git checkout`
set autoread

" editorconfig
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']

" JS / JSX / React
let g:jsx_ext_required = 0

" allows saving of files you don't have permssion to edit
cmap w!! %!sudo tee > /dev/null %

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction


" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>


" Tags
" Tagbar
nnoremap <leader>tag :TagbarToggle<CR>
let g:tagbar_autofocus=1
" GutenTags
let g:gutentags_cache_dir="~/.vim/tags"
let g:gutentags_ctags_executable='exctags'
" let g:gutentags_tagfile='tacotags'
let g:ycm_collect_identifiers_from_tags_files=1

" Bracesless
autocmd FileType python BracelessEnable +indent

" :highlight NeomakeErrorMsg ctermfg=227 ctermbg=237
" let g:neomake_warning_sign={'text': '⚠', 'texthl': 'NeomakeErrorMsg'}

"" nvim terminal
:tnoremap <A-h> <C-\><C-n><C-w>h
:tnoremap <A-j> <C-\><C-n><C-w>j
:tnoremap <A-k> <C-\><C-n><C-w>k
:tnoremap <A-l> <C-\><C-n><C-w>l
:nnoremap <A-h> <C-w>h
:nnoremap <A-j> <C-w>j
:nnoremap <A-k> <C-w>k
:nnoremap <A-l> <C-w>l
" :au BufEnter * if &buftype == 'terminal' | :startinsert | endif
:tnoremap <Esc> <C-\><C-n>

" python black
let g:black_virtualenv = '/home/cldershem/.virtualenvs/vim_black'
autocmd BufWritePre *.py execute ':Black'

" nvim pum window
set wildoptions=pum
set pumblend=10
" set termguicolors


" TODOs
noremap <Leader>t :noautocmd vimgrep /TODO/j **/*.dart<CR>:cw<CR>

" vim-test
" these "Ctrl mappings" work well when Caps Lock is mapped to Ctrl
nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-g> :TestVisit<CR>

" vim-test strategy
let test#strategy = "neovim"

" vim-pencil
let g:pencil#textwidth = 80
