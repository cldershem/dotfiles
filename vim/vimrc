" vim plug
call plug#begin('~/.vim/bundle')

Plug 'tpope/vim-fugitive'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-vinegar'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdtree-git-plugin'
" Plug 'SirVer/ultisnips'

Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }
" " Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
" " Plug 'zchee/deoplete-jedi'
Plug 'ervandew/supertab'
" " Plug 'carlitux/deoplete-ternjs', { 'for': ['javascript', 'javascript.jsx'],  'do': 'npm install -g tern' }
Plug 'othree/jspc.vim', { 'for': ['javascript', 'javascript.jsx'] }

Plug 'tpope/vim-commentary'
Plug 'groenewege/vim-less'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'othree/html5.vim'
Plug 'hail2u/vim-css3-syntax'
Plug 'mitsuhiko/vim-jinja'
Plug 'alvan/vim-closetag'
Plug 'honza/vim-snippets'
" Plug 'hdima/python-syntax'
" Plug 'fatih/vim-go'
" Plug 'keith/swift.vim'
Plug 'tpope/vim-unimpaired'
" Plug 'ludovicchabant/vim-gutentags'
Plug 'tweekmonster/braceless.vim'
" Plug 'deris/vim-duzzle'
Plug 'mhinz/vim-signify'
Plug 'edkolev/tmuxline.vim'
" Plug 'blindFS/vim-taskwarrior'
" Plug 'nathangrigg/vim-beancount'
" " Plug 'sebastianmarkow/deoplete-rust'
Plug 'rust-lang/rust.vim'
" Plug 'majutsushi/tagbar'
Plug 'editorconfig/editorconfig-vim'
Plug 'w0rp/ale'
" Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'posva/vim-vue'
Plug 'mhartington/nvim-typescript'
Plug 'leafgarland/typescript-vim'
Plug 'wellle/tmux-complete.vim'
Plug 'Shougo/context_filetype.vim'

Plug 'pest-parser/pest.vim'

Plug 'python/black'
Plug 'numirias/semshi', {'do': ':UpdateRemotePlugins'}

Plug 'neoclide/coc.nvim', {'do': { -> coc#util#install()}}

call plug#end()

" deoplete virtualenv fix
let g:python_host_prog = '/home/cldershem/.virtualenvs/neovim2/bin/python'
let g:python3_host_prog = '/home/cldershem/.virtualenvs/neovim3/bin/python'

" deoplete
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_ignore_case = 1
let g:deoplete#enable_smart_case = 1
let g:deoplete#enable_camel_case = 1
let g:deoplete#enable_refresh_always = 1
let g:deoplete#max_abbr_width = 0
let g:deoplete#max_menu_width = 0
let g:deoplete#omni#input_patterns = get(g:,'deoplete#omni#input_patterns',{})
let g:deoplete#auto_completion_start_length = 1

" deplete python

" deplete javascript
let g:deoplete#sources#ternjs#filetypes = [
    \ 'file',
    \ 'ultisnips',
    \ 'ternjs',
    \ 'vue',
    \ ]
let g:deoplete#omni#functions = {}
let g:deoplete#omni#functions.javascript = [
    \ 'tern#Complete',
    \ 'jspc#omni',
    \ ]
" set completeopt-=preview
let g:SuperTabClosePreviewOnPopupClose = 1

" deoplete/tmux-complete
let g:tmuxcomplete#trigger = ''

""""""""""""""""""""" RUST
let g:LanguageClient_serverCommands = {
    \ 'vue': ['vls'],
    \ 'rust': ['rustup', 'run', 'stable', 'rls'],
    \ }
" language server
nnoremap <F5> :call LanguageClient_contextMenu()<CR>

" deoplete rust
let g:deoplete#sources#rust#racer_binary='/home/cldershem/.cargo/bin/racer'
let g:deoplete#sources#rust#rust_source_path='/home/cldershem/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src'
" rust
let g:racer_cmd = "/home/cldershem/.cargo/bin/racer"
let g:racer_experimental_completer = 1
let g:rustfmt_autosave = 1
let g:ale_rust_cargo_use_clippy = 1
" let g:rustfmt_autosave_if_config_present = 0
let g:ale_lingers = {
    \ 'rust': ['rls']
    \ }
let g:ale_rust_rls_toolchain = "nightly"
""""""""""""""""""""" RUST

" supertab
autocmd FileType javascript let g:SuperTabDefaultCompletionType = "<c-x><c-o>"
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" supposedly changes stuff based on filetype
filetype on
filetype plugin on

" something for python comments
autocmd FileType python set commentstring=#\ %s
" autocmd FileType htmljinja set commentstring={#\ %s

" fixes colors for dark background
set background=dark

" leader
let mapleader=","

" json tool
:nmap <leader>js :%!python -m json.tool<CR>

" case insensitive search
set ignorecase
set smartcase

" switch between buffers
nnoremap <leader><leader> <c-^

" Syntax highlighting
syntax on

" autoindent
filetype indent on
set autoindent

" line numbers
set relativenumber
set number

" Highlight search
set hlsearch
set incsearch

" Highlight search off
:nmap <leader>q :nohlsearch<CR>

" ctrlp
set runtimepath^=~/.vim/bundle/ctrlp.vim

" nerd tree
:nmap nt :NERDTreeToggle<CR>
let g:NERDTreeWinSize = 30
let g:NERDTreeIgnore = ['\.pyc$']

" closetag
" :au Filetype html,xml,xsl source ~/.vim/scripts/closetag.vim
:let g:closetag_html_style=1
:source ~/.vim/bundle/vim-closetag/plugin/closetag.vim

" escape key
:imap jj <Esc>
:imap jk <Esc>

" spaces not tabs
set tabstop=4
set shiftwidth=4
set expandtab

" set tabstops for filetypes
autocmd FileType tex setlocal shiftwidth=2 tabstop=2
autocmd FileType html setlocal shiftwidth=2 tabstop=2
autocmd FileType htmljinja setlocal shiftwidth=2 tabstop=2
autocmd FileType css setlocal shiftwidth=2 tabstop=2
autocmd FileType less setlocal shiftwidth=2 tabstop=2
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2
autocmd FileType ruby setlocal shiftwidth=2 tabstop=2
autocmd FileType eruby setlocal shiftwidth=2 tabstop=2
autocmd FileType yaml setlocal shiftwidth=2 tabstop=2

" no line wrap
set nowrap

" save/restore folding
autocmd BufWinLeave *.* mkview!
autocmd BufWinEnter *.* silent loadview

" folding
:set foldmethod=indent
" nnoremap <Space> za " space toggles fold

" " synstastic
" " run flake8 (pep8 + pyflakes) on save
" " autocmd BufWritePost *.py call Flake8()
" " let g:syntastic_check_on_open=1
" let g:syntastic_python_checkers=["flake8"] "  pylint
" let g:syntastic_python_checkers=["pylint"]
" let g:syntastic_always_populate_loc_list=1
" let g:syntastic_javascript_checkers=["jshint"]

" " python 3
" let g:syntastic_python_python_exec = '/usr/local/bin/python3'

" vim-less support
nnoremap ,m :w <BAR> !lessc % > %:t:r.css<CR><space>

" LaTeX rubber macro for compiling with errors
autocmd filetype tex nnoremap <leader>ce :w<CR>:!rubber --pdf --warn all %<CR>

" LaTeX rubber macro for compiling with no errors
autocmd filetype tex nnoremap <leader>cne :w<CR>:!rubber --pdf %<CR><CR>

" LaTeX PDF macro
autocmd filetype tex nnoremap <leader>v :!evince %:r.pdf &<CR><CR>

" spellcheck for LaTeX, txt, markdown
autocmd BufNewFile,BufRead *.tex setlocal spell spelllang=en_us
autocmd BufNewFile,BufRead *.txt setlocal spell spelllang=en_us
autocmd BufNewFile,BufRead *.md setlocal spell spelllang=en_us

" vim-airline
let g:airline_powerline_fonts = 1
let g:airline_theme = 'molokai'

" vim-airline tabs
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#ale#enabled = 1

" vim-airline coc.nvim
let g:airline_section_error = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'

" Always show statusline
set laststatus=2

" Use 256 colours (Use this setting only if your terminal supports 256 colours)
set t_Co=256

" set splits right and below
set splitright
set splitbelow

" change filetypes
au BufRead,BufNewFile *.md set filetype=markdown
au BufRead,BufNewFile *.jinja set filetype=jinja

" if .vim/after/ftplugin/rst.vim is giving problem
"autocmd FileType rst setlocal shiftwidth=2 tabstop=2

" mark 88 chars
au BufRead,BufNewFile *.* let &colorcolumn=88
au BufRead,BufNewFile *.rs let &colorcolumn=120
hi ColorColumn ctermbg=darkgrey

" gundo remap
nnoremap <F5> :GundoToggle<CR>

" highlight current line
" :set cursorline

" persistent undo
set undofile
set undodir=~/.vim/vim-undo

" keeps *.swp out of working dir
set backupdir=~/.vim/vim-tmp
set directory=~/.vim/vim-tmp

" set preview color
:highlight Pmenu ctermbg=darkmagenta
:highlight Pmenu ctermfg=lightgrey
:highlight PmenuSel ctermbg=grey
:highlight PmenuSel ctermfg=darkgrey

" show whitespace
set list
set listchars=tab:▸\ ,trail:▫

" Enable basic mouse behavior such as resizing buffers.
" set mouse=a
" set mouse to work in all but insert mode
set mouse=nvc
if !has('nvim')
    if exists('$TMUX')  " Support resizing in tmux
        set ttymouse=xterm2
    endif
endif

" reload files when changed on disk, i.e. via `git checkout`
set autoread

" editorconfig
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']

" JS / JSX / React
let g:jsx_ext_required = 0

" allows saving of files you don't have permssion to edit
cmap w!! %!sudo tee > /dev/null %

" UltiSnips
let g:UltiSnipsExpandTrigger="<c-e>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
" let g:UltiSnipsSnippetDirectories=["UltiSnips"]
let g:ultisnips_python_style="GOOGLE"
let g:snips_email="cldershem@gmail.com"
let g:snips_author="Cameron"
let g:snips_github="github.com/cldershem"

" ycm: turn off question for clang compile flags
let g:ycm_confirm_extra_conf = 0
let g:ycm_autoclose_preview_window_after_insertion=1

" coc-snippets
" Use <C-l> for trigger snippet expand.
imap <C-e> <Plug>(coc-snippets-expand)
" Use <C-j> for select text for visual placeholder of snippet.
vmap <C-j> <Plug>(coc-snippets-select)
" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-j>'
" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-k>'
" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-j> <Plug>(coc-snippets-expand-jump)
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'

" fzf
set rtp+=~/.fzf
:nmap <leader>ff :Files<CR>
:nmap <leader>ft :Tags<CR>
:nmap <leader>fe :Buffers<CR>
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Tags
" Tagbar
nnoremap <leader>tag :TagbarToggle<CR>
let g:tagbar_autofocus=1
" GutenTags
let g:gutentags_cache_dir="~/.vim/tags"
let g:gutentags_ctags_executable='exctags'
" let g:gutentags_tagfile='tacotags'
let g:ycm_collect_identifiers_from_tags_files=1

" Bracesless
autocmd FileType python BracelessEnable +indent

" :highlight NeomakeErrorMsg ctermfg=227 ctermbg=237
" let g:neomake_warning_sign={'text': '⚠', 'texthl': 'NeomakeErrorMsg'}

"" nvim terminal
:tnoremap <A-h> <C-\><C-n><C-w>h
:tnoremap <A-j> <C-\><C-n><C-w>j
:tnoremap <A-k> <C-\><C-n><C-w>k
:tnoremap <A-l> <C-\><C-n><C-w>l
:nnoremap <A-h> <C-w>h
:nnoremap <A-j> <C-w>j
:nnoremap <A-k> <C-w>k
:nnoremap <A-l> <C-w>l
" :au BufEnter * if &buftype == 'terminal' | :startinsert | endif
:tnoremap <Esc> <C-\><C-n>

" python black
let g:black_virtualenv = '/home/cldershem/.virtualenvs/vim_black'
autocmd BufWritePre *.py execute ':Black'
