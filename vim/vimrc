" pathogen (plugins in folders)
execute pathogen#infect()
" call pathogen#runtime_append_all_bundles()
" call pathogen#helptags()

" supposedly changes stuff based on filetype
filetype on
filetype plugin on

" something for python comments
autocmd FileType python set commentstring=#\ %s

" fixes colors for dark background
set background=dark

" leader
let mapleader=","

" switch between buffers
nnoremap <leader><leader> <c-^

" Syntax highlighting
syntax on

" autoindent
filetype indent on
set autoindent

" line numbers
set relativenumber
set number

" Highlight search
set hlsearch
set incsearch

" Highlight search off
:nmap <leader>q :nohlsearch<CR>

" ctrlp
set runtimepath^=~/.vim/bundle/ctrlp.vim

" nerd tree
:nmap nt :NERDTreeToggle<CR>
let g:NERDTreeWinSize = 30
let g:NERDTreeIgnore = ['\.pyc$']

" closetag
" :au Filetype html,xml,xsl source ~/.vim/scripts/closetag.vim
:let g:closetag_html_style=1
:source ~/.vim/bundle/closetag.vim/plugin/closetag.vim

" escape key
:imap jj <Esc>

" spaces not tabs
set tabstop=4
set shiftwidth=4
set expandtab

" set tabstops for filetypes
autocmd FileType tex setlocal shiftwidth=2 tabstop=2
autocmd FileType html setlocal shiftwidth=2 tabstop=2
autocmd FileType css setlocal shiftwidth=2 tabstop=2
autocmd FileType less setlocal shiftwidth=2 tabstop=2
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2

" no line wrap
set nowrap

" save/restore folding
autocmd BufWinLeave .* mkview
autocmd BufWinEnter .* silent loadview

" folding
:set foldmethod=indent
" nnoremap <Space> za " space toggles fold

" run flake8 (pep8 + pyflakes) on save
" autocmd BufWritePost *.py call Flake8()
let g:syntastic_check_on_open=1
let g:syntastic_python_checkers=["flake8"]
let g:syntastic_always_populate_loc_list=1

" vim-less support
nnoremap ,m :w <BAR> !lessc % > %:t:r.css<CR><space>

" LaTeX rubber macro for compiling with errors
autocmd filetype tex nnoremap <leader>ce :w<CR>:!rubber --pdf --warn all %<CR>

" LaTeX rubber macro for compiling with no errors
autocmd filetype tex nnoremap <leader>cne :w<CR>:!rubber --pdf %<CR><CR>

" LaTeX PDF macro
autocmd filetype tex nnoremap <leader>v :!evince %:r.pdf &<CR><CR>

" spellcheck for LaTeX, txt, markdown
autocmd BufNewFile,BufRead *.tex setlocal spell spelllang=en_us
autocmd BufNewFile,BufRead *.txt setlocal spell spelllang=en_us
autocmd BufNewFile,BufRead *.md setlocal spell spelllang=en_us

" vim-airline
let g:airline_powerline_fonts = 1

" vim-airline tabs
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'

" powerline
" set rtp+=$HOME/.local/lib/python2.7/site-packages/powerline/bindings/vim/

" Always show statusline
set laststatus=2

" Use 256 colours (Use this setting only if your terminal supports 256 colours)
set t_Co=256

" set splits right and below
set splitright
set splitbelow

" split navigation
" nmap <silent> <c-k> :wincmd k<CR>
" nmap <silent> <c-j> :wincmd j<CR>
" nmap <silent> <c-h> :wincmd h<CR>
" nmap <silent> <c-l> :wincmd l<CR>

" ag, silver searcher, ack-vim
let g:ackprg = 'ag --nogroup --nocolor --column'

" make md markdown
au BufRead,BufNewFile *.md set filetype=markdown

" if .vim/after/ftplugin/rst.vim is giving problem
"autocmd FileType rst setlocal shiftwidth=2 tabstop=2

" mark 80 chars
let &colorcolumn=80
hi ColorColumn ctermbg=darkgrey

" gundo remap
nnoremap <F5> :GundoToggle<CR>

" highlight current line
" :set cursorline

" persistent undo
set undofile
set undodir=~/.vim/vim-undo

" keeps *.swp out of working dir
set backupdir=~/.vim/vim-tmp
set directory=~/.vim/vim-tmp

"""""""""""""""""""
" maximum awesome "
"""""""""""""""""""

" show whitespace
set list
set listchars=tab:▸\ ,trail:▫

" ag, silver search stuff
" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
    let g:ackprg = 'ag --nogroup --column'

    " Use Ag over Grep
    set grepprg=ag\ --nogroup\ --nocolor

    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

" Enable basic mouse behavior such as resizing buffers.
set mouse=a
if exists('$TMUX')  " Support resizing in tmux
    set ttymouse=xterm2
endif

" reload files when changed on disk, i.e. via `git checkout`
set autoread

"""""""""""""""""""""
"end maximum awesome"
"""""""""""""""""""""

" allows saving of files you don't have permssion to edit
cmap w!! %!sudo tee > /dev/null %

" " ultisnip/ycm remapping
" function! g:UltiSnips_Complete()
"     call UltiSnips_ExpandSnippet()
"     if g:ulti_expand_res == 0
"         if pumvisible()
"             return "\<c-n>"
"         else
"             call UltiSnips_JumpForwards()
"             if g:ulti_jump_forwards_res == 0
"                 return "\<tab>"
"             endif
"         endif
"     endif
"     return ""
" endfunction
" autocmd BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <c-r>=g:UltiSnips_Complete()<cr>"
" let g:UltiSnipsJumpForwardTrigger="<tab>"
" let g:UltiSnipsListSnippets="<c-e>"
" let g:ycm_autoclose_preview_window_after_insertion=1

let g:UltiSnipsExpandTrigger="<c-e>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
" let g:UltiSnipsSnippetDirectories=["UltiSnips"]
